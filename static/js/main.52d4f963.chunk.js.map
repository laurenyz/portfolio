{"version":3,"sources":["components/Navbar.jsx","containers/ProjectsContainer.jsx","containers/AboutMeContainer.jsx","containers/ContactContainer.jsx","containers/ProjectShowPage.jsx","containers/Homescreen.jsx","App.js","serviceWorker.js","index.js"],"names":["withRouter","props","onClick","history","push","ProjectsContainer","AboutMeContainer","ContactContainer","ProjectShowPage","Homescreen","App","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","basename","process","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"sPAmBeA,eAhBA,SAACC,GAEZ,OACI,sCAEI,4BAAQC,QAIhB,WACID,EAAME,QAAQC,KAAK,YALf,aCGGC,EATW,WAEtB,OACI,mDCMOC,EATU,WAErB,OACI,kDCMOC,EATU,WAErB,OACI,kDCMOC,EATS,WAEpB,OACI,iDCMOC,EATI,WAEf,OACI,4CCuBOC,MAhBf,WACE,OACE,8CAEE,kBAAC,EAAD,MACA,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAaJ,IACnC,kBAAC,IAAD,CAAOE,OAAK,EAACC,KAAO,gBAAgBC,UAAaL,IACjD,kBAAC,IAAD,CAAOG,OAAK,EAACC,KAAK,YAAYC,UAAaR,IAC3C,kBAAC,IAAD,CAAOM,OAAK,EAACC,KAAO,SAASC,UAAaP,IAC1C,kBAAC,IAAD,CAAOK,OAAK,EAACC,KAAO,WAAWC,UAAaN,OCVlCO,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,WCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACG,kBAAC,IAAD,CAAeC,SAAUC,cACvB,kBAAC,EAAD,QAGLC,SAASC,eAAe,SDsHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.52d4f963.chunk.js","sourcesContent":["import React from 'react'\nimport { withRouter } from 'react-router-dom'\n\nconst Navbar = (props) => {\n\n    return(\n        <div>\n            Navbar\n            <button onClick={handleOnClick}>About</button>\n        </div>\n    )\n\n    function handleOnClick() {\n        props.history.push('/about')\n    }\n}\n\n\n\nexport default withRouter(Navbar)","import React from 'react'\n\nconst ProjectsContainer = () => {\n\n    return(\n        <div>\n            ProjectsContainer\n        </div>\n    )\n}\n\nexport default ProjectsContainer","import React from 'react'\n\nconst AboutMeContainer = () => {\n\n    return(\n        <div>\n            AboutMeContainer\n        </div>\n    )\n}\n\nexport default AboutMeContainer","import React from 'react'\n\nconst ContactContainer = () => {\n\n    return(\n        <div>\n            ContactContainer\n        </div>\n    )\n}\n\nexport default ContactContainer","import React from 'react'\n\nconst ProjectShowPage = () => {\n\n    return(\n        <div>\n            ProjectShowPage\n        </div>\n    )\n}\n\nexport default ProjectShowPage","import React from 'react'\n\nconst Homescreen = () => {\n\n    return(\n        <div>\n            Homescreen\n        </div>\n    )\n}\n\nexport default Homescreen","import React from 'react';\n// import logo from './logo.svg';\nimport './App.css';\nimport {Route, Switch, withRouter, Redirect} from \"react-router-dom\"\nimport Navbar from './components/Navbar'\nimport ProjectsContainer from './containers/ProjectsContainer'\nimport AboutMeContainer from './containers/AboutMeContainer'\nimport ContactContainer from './containers/ContactContainer'\nimport ProjectShowPage from './containers/ProjectShowPage'\nimport Homescreen from './containers/Homescreen'\n\n\nfunction App() {\n  return (\n    <div>\n      This is my app\n      <Navbar />\n      <Switch>\n          <Route exact path='/' component = {Homescreen} />  \n          <Route exact path = '/projects/:id' component = {ProjectShowPage} />  \n          <Route exact path='/projects' component = {ProjectsContainer} />  \n          <Route exact path = '/about' component = {AboutMeContainer} /> \n          <Route exact path = '/contact' component = {ContactContainer} /> \n      </Switch>\n    </div>\n   )\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter } from \"react-router-dom\"\n\nReactDOM.render(\n  <React.StrictMode>\n     <BrowserRouter basename={process.env.PUBLIC_URL}>\n       <App />\n     </BrowserRouter>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}